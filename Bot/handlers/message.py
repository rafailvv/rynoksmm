from aiogram import Router
from aiogram.types import CallbackQuery

import asyncio
import os
import uuid

import PIL.ImageOps
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    LabeledPrice,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    PreCheckoutQuery,
    InputFile,
    FSInputFile,
    CallbackQuery,
    InputMediaPhoto,
    InputMediaDocument
)
from aiogram.filters import Command, CommandStart
from aiogram.filters.command import CommandObject

from dotenv import dotenv_values
import pandas as pd

import Database.database as db

from Bot.misc.states import SmmStatesGroup as st
from Bot.misc.methods import *


from PIL import Image, ImageDraw

from apscheduler.triggers.date import DateTrigger
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.redis import RedisJobStore

from aiogram.fsm.storage.redis import RedisStorage, Redis

from datetime import datetime, timedelta

from Bot.misc.scheduler import scheduler
from Bot.misc.bot import bot

message_router = Router()


@message_router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@message_router.message(lambda message: message.content_type in {ContentType.SUCCESSFUL_PAYMENT})
async def got_payment(message: Message, state: FSMContext):
    payload = message.successful_payment.invoice_payload.split("|")
    if payload[0] == "post":
        btn = [
            [KeyboardButton(text="–ú–µ–Ω—é ‚ò∞")],
            [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
        ]
        btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
        await message.answer(text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", reply_markup=btn)

        scheduler.add_job(sub_end, DateTrigger(datetime.now() + timedelta(days=30 * int(payload[1]))), args=[message])
        await db.add_date_sub(message.chat.id, datetime.utcnow() + timedelta(days=30 * int(payload[1])))


@message_router.message(Command("delete"))
async def delete_smm(message: Message):
    await db.delete_smm(message.chat.id)
    await message.answer(text="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω")


@message_router.message(F.text.in_({"/start", "–ú–µ–Ω—é ‚ò∞"}))
async def start(message: Message):
    # all = await db.lst_of_users()
    # all_edit = []
    # for x in all:
    #     all_edit.append(x[0])
    # if message.chat.id in all_edit:
    #     await message.answer(text='pass')
    # else:

    await db.add_user(message.chat.id, message.chat.username)
    button_phone = [
        [
            InlineKeyboardButton(text="–Ø SMM", callback_data="menu|smm"),
            InlineKeyboardButton(text="–Ø –∏—â—É SMM", callback_data="menu|looking_smm"),
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=button_phone)
    btn = [
        [KeyboardButton(text="–ú–µ–Ω—é ‚ò∞")],
        [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
    ]
    if await db.is_smm(message.chat.id) and await db.get_date_sub(message.chat.id) < datetime.utcnow():
        btn.append([KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üéü")])
    btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
    await message.answer_sticker(
        "CAACAgIAAxkBAAIFvmWXxX8WpuUBN9IAAZCCjUeOI7IIdwAC2A8AAkjyYEsV-8TaeHRrmDQE",
        reply_markup=btn,
    )
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}, –∫—Ç–æ —Ç—ã? ü§î",
        reply_markup=keyboard,
    )


@message_router.message(CommandStart())
async def deep_link_start(message: Message, state: FSMContext):
    data = message.text.split()[1]
    if data == "i_smm":
        await state.clear()
        await state.update_data(ta=[])
        await smm_menu(message, state)
    elif data == "i_looking_smm":
        await state.clear()
        await state.update_data(ta=[])
        await search_by_field(message, state)


@message_router.message(F.text == "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")
async def get_dos(message: Message, state: FSMContext):
    dict_of_contacts = await db.get_bought_contacts(message.chat.id)
    await contacts(message, state, list(dict_of_contacts.items()), 0, False)


@message_router.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üéü")
async def extend_sub(message: Message, state: FSMContext):
    btn = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="add_field|promo_skip")]]
    btn = InlineKeyboardMarkup(inline_keyboard=btn)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', reply_markup=btn)
    await state.set_state(st.promo)


@message_router.message(Command("i_smm"))
async def smm_menu(message: Message, state: FSMContext):
    if await db.is_smm(message.chat.id):
        await message.answer(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç SMM. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Ñ–∏–ª—å'.")
    else:
        scheduler.add_job(send_notification, DateTrigger(datetime.now() + timedelta(days=1)), args=[message])
        scheduler.add_job(send_notification, DateTrigger(datetime.now() + timedelta(days=3)), args=[message])
        scheduler.add_job(send_notification, DateTrigger(datetime.now() + timedelta(days=7)), args=[message])
        scheduler.add_job(send_notification, DateTrigger(datetime.now() + timedelta(days=14)), args=[message])
        scheduler.add_job(send_notification, DateTrigger(datetime.now() + timedelta(days=30)), args=[message])
        await db.add_smm(message.chat.id, datetime.utcnow())
        await message.answer(f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üëá")

        await state.set_state(st.fullname)


@message_router.message(st.fullname)
async def fullname(message: Message, state: FSMContext):
    name = list(message.text.split())
    if len(name) == 2:
        name = str(name[0]) + " " + str(name[1])
        await db.add_fullname(message.chat.id, message.text)
        btn = [[KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±", request_contact=True)]]
        btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá", reply_markup=btn)
        await state.set_state(st.phone)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é üëá")


@message_router.message(st.phone)
async def phone(message: Message, state: FSMContext):
    if message.content_type == "contact":
        phone = message.contact.phone_number
        if not message.contact.phone_number.startswith("+"):
            phone = "+" + phone
        await db.add_phone(message.chat.id, phone)
        markup = types.ReplyKeyboardRemove()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ c–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç üëá", reply_markup=markup)
        await state.set_state(st.age)

    else:
        await message.answer("–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")


@message_router.message(st.age)
async def age(message: Message, state: FSMContext):
    if message.text.isdigit() and 0 < int(message.text) < 120:
        await db.add_age(message.chat.id, int(message.text))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ üëá")
        await state.set_state(st.town)

    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@message_router.message(st.town)
async def town(message: Message, state: FSMContext, fl=False, town=""):
    url = "https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%B3%D0%BE%D1%80%D0%BE%D0%B4%D0%BE%D0%B2_%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D0%B8"
    df = pd.read_html(url)[0]
    cities = df["–ì–æ—Ä–æ–¥"].to_list()
    if fl or message.text.capitalize() in cities:
        if town == "":
            await db.add_town(message.chat.id, message.text.capitalize())
        else:
            await db.add_town(message.chat.id, town)
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è üì∏")
        await state.set_state(st.photo)
    else:
        btns = [[InlineKeyboardButton(text="–î–∞", callback_data=f"town|1|{message.text.capitalize()}"),
                 InlineKeyboardButton(text="–ù–µ—Ç", callback_data="town|0")]]
        btns = InlineKeyboardMarkup(inline_keyboard=btns)
        await message.answer("–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=btns)


@message_router.message(st.photo)
async def photo(message: Message, state: FSMContext):
    if message.content_type in ["photo"]:
        file_id = message.photo[-1].file_id if message.content_type == "photo" else message.animation.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, f"API/profile/templates/images/{message.chat.id}.{file_path.split('.')[-1]}")
        await db.add_photo(message.chat.id,
                           message.photo[-1].file_id if message.content_type == "photo" else message.animation.file_id)
        await cut_photo(message.chat.id, file_path)
        btns = [[InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="photo|change"),
                 InlineKeyboardButton(text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="photo|accept")]]
        btns = InlineKeyboardMarkup(inline_keyboard=btns)
        document = FSInputFile(f"API/profile/templates/images/{message.chat.id}.{file_path.split('.')[-1]}")
        await message.answer_photo(photo=document, caption="–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", reply_markup=btns)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")


@message_router.message(st.description)
async def send_cost(message: Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    await db.add_description(message.chat.id, message.text)
    await message.answer("–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤–∞—à–∏—Ö —É—Å–ª—É–≥ –≤ —Ä—É–±–ª—è—Ö –∑–∞ –º–µ—Å—è—Ü üëá")
    await state.set_state(st.cost)


@message_router.message(st.cost)
async def cost(message: Message, state: FSMContext):
    if message.text.isdigit() and 15000 <= int(message.text) <= 10000000:
        await db.add_cost(message.chat.id, int(message.text))
        await state.clear()
        await state.update_data(ta=list())
        await state.update_data(cnt_of_sd=0)
        await search_by_field(message, state, smm=True)
    else:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ"
            if not message.text.isdigit()
            else "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 15000‚ÇΩ"
            if 15000 > int(message.text)
            else "–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞"
        )


@message_router.message(st.promo)
async def promo(message: Message, state: FSMContext, fl=True, promo=None):
    user_id = message.chat.id
    if promo is None:
        promo = message.text

    tas = await db.get_ta_by_user_id(user_id)
    smm_id, full_name, phone, user_id, age, town, cost, photo, username, description, date_sub = await db.get_profile_by_id(user_id)
    if None in [full_name, phone, age, town, cost, description, date_sub] or len(tas) == 0 or f"{user_id}.jpg" not in os.listdir("API/profile/templates/images"):
        btn = [[KeyboardButton(text="–ú–µ–Ω—é ‚ò∞")], [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
               [KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üéü")]]
        btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Ñ–∏–ª—å', –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É", reply_markup=btn)
        return
    if promo == "-":
        if fl and not await db.is_used_free_sub(message.chat.id):
            btns = [[InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"free_sub|use|{message.chat.id}")],
                    [InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–º", callback_data=f"free_sub|then")]]
            btns = InlineKeyboardMarkup(inline_keyboard=btns)
            await message.answer(text="–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π", reply_markup=btns)
        else:
            cost = 1000
            discount3 = 0.1
            discount6 = 0.25
            discount12 = 0.4
            btn = [
                [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data=f"sub|1|{cost}|{user_id}")],
                [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞", callback_data=f"sub|3|{int(3 * cost * (1 - discount3))}|{user_id}")],
                [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤", callback_data=f"sub|6|{int(6 * cost * (1 - discount6))}|{user_id}")],
                [InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤", callback_data=f"sub|12|{int(12 * cost * (1 - discount12))}|{user_id}")]
            ]
            btn = InlineKeyboardMarkup(inline_keyboard=btn)
            await message.answer(
                text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ üëá\n\n1 –º–µ—Å—è—Ü - {cost} ‚ÇΩ\n3 –º–µ—Å—è—Ü–∞ - {int(3 * cost * (1 - discount3))} ‚ÇΩ (–°–∫–∏–¥–∫–∞ {int(discount3 * 100)}%)\n6 –º–µ—Å—è—Ü–µ–≤ - {int(6 * cost * (1 - discount6))} ‚ÇΩ (–°–∫–∏–¥–∫–∞ {int(discount6 * 100)}%)\n12 –º–µ—Å—è—Ü–µ–≤ - {int(12 * cost * (1 - discount12))} ‚ÇΩ (–°–∫–∏–¥–∫–∞ {int(discount12 * 100)}%)",
                reply_markup=btn
            )
    elif promo.lower() == "–Ω–µ–¥–µ–ª—è":
        btn = [
            [KeyboardButton(text="–ú–µ–Ω—é ‚ò∞")],
            [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
        ]
        btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
        await message.answer(text="–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–µ–¥–µ–ª—é!", reply_markup=btn)
        await db.add_date_sub(message.chat.id, datetime.utcnow() + timedelta(days=7))
        scheduler.add_job(sub_end, DateTrigger(datetime.now() + timedelta(days=7)), args=[message])
    elif promo.lower() == "–º–µ—Å—è—Ü":
        btn = [
            [KeyboardButton(text="–ú–µ–Ω—é ‚ò∞")],
            [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
        ]
        btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
        await message.answer(text="–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü!", reply_markup=btn)
        await db.add_date_sub(message.chat.id, datetime.utcnow() + timedelta(days=30))
        scheduler.add_job(sub_end, DateTrigger(datetime.now() + timedelta(days=30)), args=[message])

    state_data = await state.get_data()
    await state.clear()
    await state.update_data(state_data)


@message_router.message(Command("i_looking_smm"))
async def search_by_field(message: Message, state: FSMContext, smm=False, edit=False, clear=True):
    f = []
    field = await db.get_all_field()
    for i in range(len(field)):
        f.append(field[i][0])
    btns = []
    for i in range(len(f)):
        btns.append([InlineKeyboardButton(text=f"{f[i]}", callback_data=f"field|{f[i]}|{smm}")])
    btns = InlineKeyboardMarkup(inline_keyboard=btns)
    if edit:
        await message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏üëá", reply_markup=btns)
    else:
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏üëá", reply_markup=btns)


@message_router.message()
async def messages(message: Message, state: FSMContext):
    state_data = await state.get_data()
    if "town" in state_data and state_data["town"]:
        dict_of_smm = state_data["town_d"]
        await state.clear()
        if message.text == "-":
            pass
        else:
            i = 0
            for k, v in dict_of_smm:
                if v[2].lower() != message.text.lower():
                    del dict_of_smm[i]
                i += 1
        await search_by_cost(message, state, dict_of_smm)
    elif "cost" in state_data and state_data["cost"]:
        dict_of_smm = state_data["cost_d"]
        await state.clear()
        if message.text.isdigit():
            i = 0
            for k, v in dict_of_smm:
                if v[4] < int(message.text):
                    del dict_of_smm[i]
                i += 1
            await list_of_smm(message, dict_of_smm, 0, state)
        else:
            await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
