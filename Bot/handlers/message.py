from aiogram import Router
from aiogram.types import CallbackQuery

import asyncio
import os
import uuid

from Bot.config import config

import PIL.ImageOps
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    LabeledPrice,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    PreCheckoutQuery,
    InputFile,
    FSInputFile,
    CallbackQuery,
    InputMediaPhoto,
    InputMediaDocument,
    WebAppInfo
)
from aiogram.filters import Command, CommandStart
from aiogram.filters.command import CommandObject

from dotenv import dotenv_values
import pandas as pd

from Database.manager import db

from Bot.misc.states import SmmStatesGroup as st
from Bot.misc.methods import *

from PIL import Image, ImageDraw

from apscheduler.triggers.date import DateTrigger
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.redis import RedisJobStore

from aiogram.fsm.storage.redis import RedisStorage, Redis

from datetime import datetime, timedelta

from Bot.misc.scheduler import scheduler
from Bot.misc.bot import *

from yookassa import Configuration, Payment
import uuid
from yookassa.domain.response import PaymentResponse

from aiogram.exceptions import TelegramForbiddenError

from openai import OpenAI

message_router = Router()


async def got_payment(message: Message, payment_response: PaymentResponse, payment_type, payment_id, state: FSMContext):
    state_data = await state.get_data()
    if payment_type == "subscription":
        btn = [
            [KeyboardButton(text="–ú–µ–Ω—é ‚ò∞"), KeyboardButton(text="–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†")],
            [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
        ]
        if message.chat.id in config.tg_bot.admins:
            btn.append([KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ üì©")])
        btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
        await message.answer(text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                             reply_markup=btn)

        scheduler.add_job(sub_end,
                          DateTrigger(datetime.now() + timedelta(days=int(payment_response.metadata.get('days')))),
                          args=[message.chat.id])
        await db.smm.add_date_sub(message.chat.id,
                                  datetime.utcnow() + timedelta(days=int(payment_response.metadata.get('days'))))
        await db.smm.add_payment(message.chat.id, datetime.utcnow(),
                                 datetime.utcnow() + timedelta(days=int(payment_response.metadata.get('days'))),
                                 int(payment_response.amount.value), payment_id)
    elif payment_type == "requests":
        btn = [
            [KeyboardButton(text="–ú–µ–Ω—é ‚ò∞"), KeyboardButton(text="–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†")],
            [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
        ]
        if message.chat.id in config.tg_bot.admins:
            btn.append([KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ üì©")])
        btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
        limit = state_data["user_requests_limit"] + int(payment_response.metadata["days"])
        await state.update_data(user_requests_limit=limit)
        await message.answer(text=f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {limit - state_data['user_requests_count']} –∑–∞–ø—Ä–æ—Å–æ–≤",
                             reply_markup=btn)
        await db.smm.add_payment(message.chat.id, datetime.utcnow(),
                                 datetime.utcnow() + timedelta(days=int(payment_response.metadata.get('days'))),
                                 int(payment_response.amount.value), payment_id)


@message_router.message(Command("stats"))
async def stats(message: Message, state: FSMContext):
    if message.chat.id in config.tg_bot.admins:
        cnt_users = len(await db.smm.get_active_payment())
        users_lw = len(await db.smm.get_payments_for_last_days(7, 0))
        cost_lw = await db.smm.get_total_cost_for_last_days(7, 0)
        users_pw = len(await db.smm.get_payments_for_last_days(14, 7))
        await message.answer(
            text=f"–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {cnt_users}\n–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {users_lw}\n–ö–æ–ª-–≤–æ –¥–µ–Ω–µ–≥ –∑–∞ –Ω–µ–¥–µ–ª—é: {cost_lw} ‚ÇΩ\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é {round(((users_lw - users_pw) / (users_pw if users_pw != 0 else 1)) * 100)}%")
    else:
        await message.answer(text="–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@message_router.message(Command("delete"))
async def delete_smm(message: Message):
    await db.smm.delete_smm(message.chat.id)
    await message.answer(text="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω")


@message_router.message(F.text.in_({"/start", "–ú–µ–Ω—é ‚ò∞"}))
async def start(message: Message):
    # all = await db.lst_of_users()
    # all_edit = []
    # for x in all:
    #     all_edit.append(x[0])
    # if message.chat.id in all_edit:
    #     await message.answer(text='pass')
    # else:

    await db.users.add_user(message.chat.id, message.chat.username)
    button_phone = [
        [
            InlineKeyboardButton(text="–Ø SMM", callback_data="menu|smm"),
            InlineKeyboardButton(text="–Ø –∏—â—É SMM", callback_data="menu|looking_smm"),
        ], [InlineKeyboardButton(text="–ù–µ–π—Ä–æSMM ü§ñ", callback_data="menu|ai")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=button_phone)
    btn = [
        [KeyboardButton(text="–ú–µ–Ω—é ‚ò∞"), KeyboardButton(text="–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†")],
        [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
    ]
    if message.chat.id in config.tg_bot.admins:
        btn.append([KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ üì©")])
    if await db.smm.is_smm(message.chat.id) and await db.smm.get_date_sub(message.chat.id) < datetime.utcnow():
        btn.append([KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üéü")])
    btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
    await message.answer_sticker(
        "CAACAgIAAxkBAAIFvmWXxX8WpuUBN9IAAZCCjUeOI7IIdwAC2A8AAkjyYEsV-8TaeHRrmDQE",
        reply_markup=btn,
    )
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}, –∫—Ç–æ —Ç—ã? ü§î",
        reply_markup=keyboard,
    )


@message_router.message(CommandStart())
async def deep_link_start(message: Message, state: FSMContext):
    data = message.text.split()[1]
    if data == "i_smm":
        await state.clear()
        await state.update_data(ta=[])
        await smm_menu(message, state)
    elif data == "i_looking_smm":
        await state.clear()
        await state.update_data(ta=[])
        await search_by_field(message, state)
    elif data.startswith("pay"):
        _, payment_id = data.split("_")
        Configuration.account_id = config.yookassa.shop_id
        Configuration.secret_key = config.yookassa.secret_key
        payment_response = Payment.find_one(payment_id)
        purchase_with_payment_id = await db.users.get_purchase_by_payment_id(payment_id)
        if payment_response.status != "succeeded":
            await message.answer("–í–æ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å  —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É")
            return
        payment_type = payment_response.metadata["type"]
        if purchase_with_payment_id is None and message.chat.id == int(payment_response.metadata.get("client_id")):
            await got_payment(message, payment_response, payment_type, payment_id, state)
            return


@message_router.message(st.thread_state)
async def ai_smm(message: Message, state: FSMContext):
    state_data = await state.get_data()
    query = message.text
    if query == "–í—ã–π—Ç–∏ –∏–∑ –ù–µ–π—Ä–æSMM ‚ùå":
        await state.clear()
        await state.update_data(state_data)
        btn = [
            [KeyboardButton(text="–ú–µ–Ω—é ‚ò∞"), KeyboardButton(text="–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†")],
            [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
        ]
        if message.chat.id in config.tg_bot.admins:
            btn.append([KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ üì©")])
        if await db.smm.is_smm(message.chat.id) and await db.smm.get_date_sub(message.chat.id) < datetime.utcnow():
            btn.append([KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üéü")])
        btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –ù–µ–π—Ä–æSMM", reply_markup=btn)
        return
    if state_data["user_requests_limit"] <= state_data["user_requests_count"]: # and message.chat.id not in config.tg_bot.admins
        btn = [
            [InlineKeyboardButton(text="50 –ó–∞–ø—Ä–æ—Å–æ–≤", web_app=WebAppInfo(
                url=f"https://rynoksmm.ru/templates/payment.html?price=990&days=50&req=requests"))],
            [InlineKeyboardButton(text="100 –ó–∞–ø—Ä–æ—Å–æ–≤", web_app=WebAppInfo(
                url=f"https://rynoksmm.ru/templates/payment.html?price=1490&days=100&req=requests"))],
            [InlineKeyboardButton(text="500 –ó–∞–ø—Ä–æ—Å–æ–≤", web_app=WebAppInfo(
                url=f"https://rynoksmm.ru/templates/payment.html?price=5990&days=500&req=requests"))]
        ]
        btn = InlineKeyboardMarkup(inline_keyboard=btn)
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ üëá\n\n50 –ó–∞–ø—Ä–æ—Å–æ–≤ - 990 ‚ÇΩ\n100 –ó–∞–ø—Ä–æ—Å–æ–≤ - 1490 ‚ÇΩ \n500 –ó–∞–ø—Ä–æ—Å–æ–≤ - 5990 ‚ÇΩ", reply_markup=btn)
        return

    message_wait = await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    chat_response = await client.chat.complete_async(
        model=config.mistral.model,
        messages=[
            {
                "role": "user",
                "content": query,
            },
        ]
    )
    try:
        import re

        def escape_markdown_v2(text):
            return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

        messages = escape_markdown_v2(chat_response.choices[0].message.content)
        await state.update_data(user_requests_count=state_data["user_requests_count"] + 1)
        await message_wait.edit_text(messages, parse_mode="MarkdownV2")
        await message.answer(f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {state_data['user_requests_limit'] - (await state.get_data())['user_requests_count']} –∑–∞–ø—Ä–æ—Å–æ–≤")
    except Exception as e:
        await message_wait.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@message_router.message(F.text == "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")
async def get_dos(message: Message, state: FSMContext):
    dict_of_contacts = await db.contacts.get_bought_contacts(message.chat.id)
    print(dict_of_contacts)
    await contacts(message, state, dict_of_contacts, 0, False)


@message_router.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üéü")
async def extend_sub(message: Message, state: FSMContext):
    btn = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="add_field|promo_skip")]]
    btn = InlineKeyboardMarkup(inline_keyboard=btn)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', reply_markup=btn)
    await state.set_state(st.promo)


@message_router.message(Command("i_smm"))
async def smm_menu(message: Message, state: FSMContext):
    if await db.smm.is_smm(message.chat.id):
        await message.answer(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç SMM. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Ñ–∏–ª—å'.")
    else:
        scheduler.add_job(send_notification, DateTrigger(datetime.now() + timedelta(days=1)),
                          args=[message.chat.id, message.chat.first_name])
        scheduler.add_job(send_notification, DateTrigger(datetime.now() + timedelta(days=3)),
                          args=[message.chat.id, message.chat.first_name])
        scheduler.add_job(send_notification, DateTrigger(datetime.now() + timedelta(days=7)),
                          args=[message.chat.id, message.chat.first_name])
        scheduler.add_job(send_notification, DateTrigger(datetime.now() + timedelta(days=14)),
                          args=[message.chat.id, message.chat.first_name])
        scheduler.add_job(send_notification, DateTrigger(datetime.now() + timedelta(days=30)),
                          args=[message.chat.id, message.chat.first_name])
        await db.smm.add_smm(message.chat.id, datetime.utcnow())
        await message.answer(f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üëá")

        await state.set_state(st.fullname)


@message_router.message(st.fullname)
async def fullname(message: Message, state: FSMContext):
    name = list(message.text.split())
    if len(name) == 2:
        name = str(name[0]) + " " + str(name[1])
        await db.smm.add_fullname(message.chat.id, message.text)
        btn = [[KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±", request_contact=True)]]
        btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá", reply_markup=btn)
        await state.set_state(st.phone)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é üëá")


@message_router.message(st.phone)
async def phone(message: Message, state: FSMContext):
    if message.content_type == "contact":
        phone = message.contact.phone_number
        if not message.contact.phone_number.startswith("+"):
            phone = "+" + phone
        await db.smm.add_phone(message.chat.id, phone)
        markup = types.ReplyKeyboardRemove()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ c–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç üëá", reply_markup=markup)
        await state.set_state(st.age)

    else:
        await message.answer("–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")


@message_router.message(st.age)
async def age(message: Message, state: FSMContext):
    if message.text.isdigit() and 0 < int(message.text) < 120:
        await db.smm.add_age(message.chat.id, int(message.text))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ üëá")
        await state.set_state(st.town)

    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@message_router.message(st.town)
async def town(message: Message, state: FSMContext, fl=False, town=""):
    url = "https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%B3%D0%BE%D1%80%D0%BE%D0%B4%D0%BE%D0%B2_%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D0%B8"
    df = pd.read_html(url)[0]
    cities = df["–ì–æ—Ä–æ–¥"].to_list()
    if fl or message.text.capitalize() in cities:
        if town == "":
            await db.smm.add_town(message.chat.id, message.text.capitalize())
        else:
            await db.smm.add_town(message.chat.id, town)
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è üì∏")
        await state.set_state(st.photo)
    else:
        btns = [[InlineKeyboardButton(text="–î–∞", callback_data=f"town|1|{message.text.capitalize()}"),
                 InlineKeyboardButton(text="–ù–µ—Ç", callback_data="town|0")]]
        btns = InlineKeyboardMarkup(inline_keyboard=btns)
        await message.answer("–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=btns)


@message_router.message(st.photo)
async def photo(message: Message, state: FSMContext):
    if message.content_type in ["photo"]:
        file_id = message.photo[-1].file_id if message.content_type == "photo" else message.animation.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, f"API/profile/templates/images/{message.chat.id}.{file_path.split('.')[-1]}")
        await db.smm.add_photo(message.chat.id,
                               message.photo[
                                   -1].file_id if message.content_type == "photo" else message.animation.file_id)
        await cut_photo(message.chat.id, file_path)
        btns = [[InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="photo|change"),
                 InlineKeyboardButton(text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="photo|accept")]]
        btns = InlineKeyboardMarkup(inline_keyboard=btns)
        document = FSInputFile(f"API/profile/templates/images/{message.chat.id}.{file_path.split('.')[-1]}")
        await message.answer_photo(photo=document, caption="–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", reply_markup=btns)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")


@message_router.message(st.description)
async def send_cost(message: Message, state: FSMContext):
    if len(message.text) > 500:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    await db.smm.add_description(message.chat.id, message.text)
    await message.answer("–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤–∞—à–∏—Ö —É—Å–ª—É–≥ –≤ —Ä—É–±–ª—è—Ö –∑–∞ –º–µ—Å—è—Ü üëá")
    await state.set_state(st.cost)


@message_router.message(st.cost)
async def cost(message: Message, state: FSMContext):
    if message.text.isdigit() and 15000 <= int(message.text) <= 10000000:
        await db.smm.add_cost(message.chat.id, int(message.text))
        await state.clear()
        await state.update_data(ta=list())
        await state.update_data(cnt_of_sd=0)
        await search_by_field(message, state, smm=True)
    else:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ"
            if not message.text.isdigit()
            else "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 15000‚ÇΩ"
            if 15000 > int(message.text)
            else "–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞"
        )


@message_router.message(F.text == "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†")
async def support(message: Message, state: FSMContext):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ —Å–ª—É–∂–±–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n–ö–∞–∫ –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å?")
    await state.set_state(st.support)


@message_router.message(st.support)
async def ans_sup(message: Message, state: FSMContext):
    await message.answer(text="–í–∞—à–µ —Å–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞")
    await db.users.add_support_request(message.text, message.chat.id, message.from_user.url)
    state_data = await state.get_data()
    await state.clear()
    await state.update_data(state_data)
    message_text = f"–í–∞–º –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='{message.from_user.url}'>{message.chat.first_name}</a> –æ–±—Ä–∞—Ç–∏–ª—Å—è –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    for admin in config.tg_bot.admins:
        await bot.send_message(chat_id=admin,
                               text=message_text)


@message_router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ üì©")
async def requests(message: Message, state: FSMContext):
    if message.chat.id in config.tg_bot.admins:
        requests = await db.users.get_support_requests()
        await iterate_requests(message, state, requests)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


@message_router.message(st.support_reply)
async def support_reply(message: Message, state: FSMContext):
    state_data = await state.get_data()
    try:
        await bot.send_message(chat_id=state_data["user_id"],
                               text=f"–í–∞–º –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n{message.text}")
        await message.answer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!")
    except TelegramForbiddenError as e:
        await message.answer(text="–í–∞—à –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    await db.users.answer_request(state_data["request"][state_data["i"]][0], state_data["request"][state_data["i"]][1])
    await requests(message, state)


@message_router.message(st.promo)
async def promo(message: Message, state: FSMContext, fl=True, promo=None):
    user_id = message.chat.id

    if promo is None:
        promo = message.text
    promo = promo.lower()
    tas = await db.ta.get_ta_by_user_id(user_id)
    smm_id, full_name, phone, user_id, age, town, cost, photo, username, description, date_sub = await db.smm.get_profile_by_id(
        user_id)
    if None in [full_name, phone, age, town, cost, description, date_sub] or len(
            tas) == 0 or f"{user_id}.jpg" not in os.listdir("API/profile/templates/images"):
        btn = [[KeyboardButton(text="–ú–µ–Ω—é ‚ò∞"), KeyboardButton(text="–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†")],
               [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
               [KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üéü")]]
        if message.chat.id in config.tg_bot.admins:
            btn.append([KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ üì©")])
        btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Ñ–∏–ª—å', –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                             reply_markup=btn)
        return
    if promo == "-":
        # if fl and not await db.smm.is_used_free_sub(message.chat.id):
        #     btns = [[InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"free_sub|use|{message.chat.id}")],
        #             [InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–º", callback_data=f"free_sub|then")]]
        #     btns = InlineKeyboardMarkup(inline_keyboard=btns)
        #     await message.answer(text="–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π", reply_markup=btns)
        # else:
        cost = 1000
        discount3 = 0.1
        discount6 = 0.25
        discount12 = 0.4
        # btn = [
        #     [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data=f"sub|1|{cost}|{user_id}")],
        #     [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞",
        #                           callback_data=f"sub|3|{int(3 * cost * (1 - discount3))}|{user_id}")],
        #     [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤",
        #                           callback_data=f"sub|6|{int(6 * cost * (1 - discount6))}|{user_id}")],
        #     [InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤",
        #                           callback_data=f"sub|12|{int(12 * cost * (1 - discount12))}|{user_id}")]
        # ]
        btn = [
            [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", web_app=WebAppInfo(
                url=f"https://rynoksmm.ru/templates/payment.html?price={cost}&days={30}&req=subscription"))],
            [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞", web_app=WebAppInfo(
                url=f"https://rynoksmm.ru/templates/payment.html?price={int(3 * cost * (1 - discount3))}&days={90}&req=subscription"))],
            [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤", web_app=WebAppInfo(
                url=f"https://rynoksmm.ru/templates/payment.html?price={int(6 * cost * (1 - discount6))}&days={180}&req=subscription"))],
            [InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤", web_app=WebAppInfo(
                url=f"https://rynoksmm.ru/templates/payment.html?price={int(12 * cost * (1 - discount12))}&days={360}&req=subscription"))],
        ]
        btn = InlineKeyboardMarkup(inline_keyboard=btn)
        await message.answer(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ üëá\n\n1 –º–µ—Å—è—Ü - {cost} ‚ÇΩ\n3 –º–µ—Å—è—Ü–∞ - {int(3 * cost * (1 - discount3))} ‚ÇΩ (–°–∫–∏–¥–∫–∞ {int(discount3 * 100)}%)\n6 –º–µ—Å—è—Ü–µ–≤ - {int(6 * cost * (1 - discount6))} ‚ÇΩ (–°–∫–∏–¥–∫–∞ {int(discount6 * 100)}%)\n12 –º–µ—Å—è—Ü–µ–≤ - {int(12 * cost * (1 - discount12))} ‚ÇΩ (–°–∫–∏–¥–∫–∞ {int(discount12 * 100)}%)",
            reply_markup=btn
        )
    else:
        promos = await db.smm.get_all_promos()
        promo_usage = promos[promo][0]
        promo_users = promos[promo][1].split(",")
        promo_duration = promos[promo][2]
        promo_text = promos[promo][3]
        users_promos = (await db.smm.get_users_promos(user_id))[0][0]
        if users_promos is not None:
            users_promos = users_promos.split(",")
        else:
            users_promos = []
        if promo in promos.keys():
            if (promo_usage > 0 or promo_usage < -100000) and promo not in users_promos and (
                    str(user_id) in promo_users or promo_users[0] == '-'):
                btn = [
                    [KeyboardButton(text="–ú–µ–Ω—é ‚ò∞"), KeyboardButton(text="–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†")],
                    [KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ü§ù")],
                ]
                if message.chat.id in config.tg_bot.admins:
                    btn.append([KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ üì©")])
                btn = ReplyKeyboardMarkup(keyboard=btn, resize_keyboard=True)
                await message.answer(text=f"{promo_text}", reply_markup=btn)
                await db.smm.add_date_sub(message.chat.id, datetime.utcnow() + timedelta(days=promo_duration))
                await db.smm.add_payment(message.chat.id, datetime.utcnow(),
                                         datetime.utcnow() + timedelta(days=promo_duration), 0)
                scheduler.add_job(sub_end, DateTrigger(datetime.now() + timedelta(days=promo_duration)),
                                  args=[message.chat.id])
                await db.smm.use_promo(promo, user_id)
            elif promo_usage <= 0:
                await message.answer(
                    text="–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å, –Ω–æ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏!")

                await extend_sub(message, state)
                return
            elif str(user_id) not in promo_users and promo_users[0] != '-':
                await message.answer(text="–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏!")
                await extend_sub(message, state)
                return
            else:
                await message.answer(text="–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏!")
                await extend_sub(message, state)
                return
        else:
            await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–æ–≤—ã–º–∏ –∞–∫—Ü–∏—è–º–∏!")
            await extend_sub(message, state)
            return

    state_data = await state.get_data()
    await state.clear()
    await state.update_data(state_data)


@message_router.message(Command("i_looking_smm"))
async def search_by_field(message: Message, state: FSMContext, smm=False, edit=False, clear=True):
    state_data = await state.get_data()
    f = []
    field = await db.ta.get_all_field()

    for i in range(len(field)):
        cnt = 0
        ta = await db.ta.get_ta_by_field(field[i][0])
        for j in range(len(ta)):
            ta[j] = ta[j][0]
            if 'ta' in state_data and ta[j] in state_data['ta']:
                cnt += 1
        f.append(f"[{cnt}/{len(ta)}] {field[i][0]}")
    btns = []
    for i in range(len(f)):
        btns.append([InlineKeyboardButton(text=f"{f[i]}", callback_data=f"field|{(f[i].split('] '))[1]}|{smm}")])
    btns = InlineKeyboardMarkup(inline_keyboard=btns)
    if edit:
        await message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏üëá", reply_markup=btns)
    else:
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏üëá", reply_markup=btns)


@message_router.message(Command("test"))
async def test(message: Message):
    await message.answer(text="1")
    scheduler.add_job(func=test2, trigger=DateTrigger(datetime.now() + timedelta(seconds=30)), args=[message.chat.id])


async def test2(user_id):
    await bot.send_message(chat_id=user_id, text="2")


@message_router.message()
async def messages(message: Message, state: FSMContext):
    state_data = await state.get_data()
    if "town" in state_data and state_data["town"]:
        dict_of_smm = state_data["town_d"]
        await state.clear()
        await state.update_data(state_data)
        await state.update_data(town_search=message.text.lower())
        await state.update_data(town=False)
        if message.text != "-":
            i = 0
            for k, v in dict_of_smm:
                if v[2].lower() != message.text.lower():
                    del dict_of_smm[i]
                i += 1
        await search_by_cost(message, state, dict_of_smm)
    elif "cost" in state_data and state_data["cost"]:
        dict_of_smm = state_data["cost_d"]
        if message.text.isdigit():
            i = 0
            for k, v in dict_of_smm:
                if v[4] < int(message.text):
                    del dict_of_smm[i]
                i += 1
            await state.clear()
            await state.update_data(state_data)
            await state.update_data(cost_search=int(message.text))
            await state.update_data(cost=False)
            await list_of_smm(message, dict_of_smm, 0, state)
        else:
            await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
